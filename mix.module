<?php

/**
 * @file
 * Primary module hooks for Mix module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\mix\Controller\MixContentSyncController;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_help().
 */
function mix_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.mix':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Mix is a collection of features for Drupal site building, management, development and user experience improvement. For more information, see the <a href=":url">online project page for the Mix module</a>.', [':url' => 'https://www.drupal.org/project/mix']) . '</p>';
      return $output;
  }
}

/**
 * Implements hook_form_alter().
 */
function mix_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  // Show form id.
  if (\Drupal::state()->get('mix.show_form_id')) {
    $form['mix_show_form_id'] = [
      '#type' => 'inline_template',
      '#template' => '<div class="mix-box mix-warning mix-full-width">
Form ID: <code>{{ form_id }}</code><br>
Copy/paste following template to [yourmodule].module file to alter this form (Replace <code>hook_</code> with <code>[yourmodule]_</code>): <br>
<textarea class="mix-code" rows="6" style="width: 100%; min-width: 280px;">
/**
 * Implements hook_form_FORM_ID_alter().
 */
hook_form_{{ form_id }}_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
}
</textarea><br>
@see <a href="https://api.drupal.org/hook_form_FORM_ID_alter" target="_blank">hook_form_FORM_ID_alter()</a>
</div>',
      '#context' => [
        'form_id' => $form_id,
      ],
      '#weight' => -1000,
    ];

    $form['mix_show_form_id']['#attached']['library'][] = 'mix/preset';
  }

  // Hide revision field.
  $currentUser = \Drupal::currentUser();
  $hideRevisionField = \Drupal::config('mix.settings')->get('hide_revision_field');
  if ($currentUser->id() != 1 && $hideRevisionField) {
    $form['revision_information']['#access'] = FALSE;
  }
}

/**
 * Implements hook_page_top().
 */
function mix_page_top(array &$page_top) {

  $text = \Drupal::state()->get('mix.environment_indicator');

  if ($text) {

    // Add an edit link if user has permission.
    $editLink = '';
    if (\Drupal::currentUser()->hasPermission('administer site configuration')) {
      $url = new Url('mix.settings', [], ['fragment' => 'edit-environment-indicator']);
      $editLink = \Drupal::linkGenerator()->generate(t('Edit'), $url);
    }

    $page_top['mix_environment_indicator'] = [
      '#type' => 'inline_template',
      '#template' => '<div id="mix-environment-indicator" style="color: #fff; background: orange; text-align: center;">{{ text }} {{ edit_link }}</div>',
      '#context' => [
        'text' => $text,
        'edit_link' => $editLink,
      ],
      '#cache' => [
        'tags' => [
          'mix:environment-indicator',
        ],
      ],
    ];
  }

}

/**
 * Remove the "Generator" meta tag from the <head> section.
 */
function mix_page_attachments_alter(array &$attachments): void {
  if (\Drupal::config('mix.settings')->get('remove_x_generator')) {
    foreach ($attachments['#attached']['html_head'] as $key => $attachment) {
      if ($attachment[1] == 'system_meta_generator') {
        unset($attachments['#attached']['html_head'][$key]);
      }
    }
  }
}

/**
 * Implements hook_perprocess_views_view_field().
 */
function mix_preprocess_views_view_field(&$variables) {
  $view = $variables['view'];
  $field = $variables['field'];

  if (\Drupal::config('mix.settings')->get('show_content_sync_id')) {
    // Add content sync id under block title.
    if ($view->id() == 'block_content' && $view->current_display == 'page_1' && $field->options['id'] == 'info') {
      $markup = $variables['output'] . '<div class="form-item__description">' . $variables['row']->content_sync_id . '</div>';
      $variables['output'] = ['#markup' => $markup];
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function mix_views_pre_render(ViewExecutable $view) {

  if (\Drupal::config('mix.settings')->get('show_content_sync_id')) {
    // Add the content sync ID to the "Custom block library" view.
    if ($view->id() == 'block_content' && $view->current_display == 'page_1') {
      foreach ($view->result as $key => $row) {
        $entity = $row->_entity;
        $content_sync_id = $entity->getEntityTypeId() . '.' . $entity->bundle() . '.' . $entity->uuid();
        $view->result[$key]->content_sync_id = $content_sync_id . ' ' . MixContentSyncController::getAjaxLink($content_sync_id);
      }
    }
  }

}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function mix_form_menu_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  // Add the content sync ID to the menu edit form.
  if (\Drupal::config('mix.settings')->get('show_content_sync_id')) {
    foreach ($form['links']['links'] as $key => $link) {
      if (strpos($key, 'menu_plugin_id:menu_link_content:') === 0) {
        if (isset($link['title'][1])) {
          $content_sync_id = str_replace(':', '.', $link['id']['#value']);
          $form['links']['links'][$key]['title'][1]['#suffix'] = '<div class="form-item__description">' . $content_sync_id . ' ' . MixContentSyncController::getAjaxLink($content_sync_id) . '</div>';
        }
      }
    }
  }

}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function mix_form_taxonomy_overview_terms_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add the content sync ID to the taxonomy_overview_terms form.
  if (\Drupal::config('mix.settings')->get('show_content_sync_id')) {
    foreach ($form['terms'] as $key => $link) {
      if (strpos($key, 'tid:') === 0) {
        $content_sync_id = 'taxonomy.term.' . $link['#term']->uuid();
        $form['terms'][$key]['term']['#suffix'] = '<div class="form-item__description">' . $content_sync_id . ' ' . MixContentSyncController::getAjaxLink($content_sync_id) . '</div>';
      }
    }
  }
}
